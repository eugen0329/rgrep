#!/usr/bin/env ruby

require 'optparse' 
require 'ptools'  # expands the functionality of the File class
require 'zip' 
require 'fileutils' 
require 'colorize' 
require 'pry' 

TMP_DIR   = "/tmp/#{File.basename(__FILE__, ".rb")}"
USAGE = "Usage: rgrep [OPTIONS] PATTERN [FILE]"

def parse_options(args)
  options = {}
  options[:a] = 0
  options[:fnames] = []
  options[:Z] = false

  parser = OptionParser.new do |opts|
    opts.banner = USAGE
    opts.on("-a NLINES", OptionParser::DecimalInteger, "Disp NLINES before and after the mutching string") do |arg|
      options[:a] = arg
    end
    opts.on("-f","--files fn1,fn2,fn3", Array, "Set a list of files separated by commas") do |arg|
      options[:fnames].concat( arg )
    end
    opts.on("-g","--regular-expression REGEXP", "Regular expression for searching in a file") do |arg|
      options[:pattern] = Regexp.new(arg)
    end
    opts.on("-R","--recursively", "Recursively search from the setted dir") do |arg|
      options[:fnames].concat( Dir['**/*'].reject { |fname| File.directory?(fname) } )
    end
    opts.on("-Z","--unzip", "Searching in zipped files") do |_|
      options[:Z] = true
    end
  end
  parser.parse!(args)
  options 
end
  
def find_in_file(file, pattern, radius)
  lines = file.map { |a| a }
  lines.select { |it| it =~ pattern }.each_with_index do |line,count|
    puts "#{count + 1}. --->".green
    index = lines.find_index(line)
    puts lines[index - radius, 2 * radius + 1]
  end
end

def unzip_archive(filename)
  conten_path = []
  Zip::File.open(filename) do |zfile| 
    zfile.each do |file|
      Dir.mkdir(TMP_DIR) unless Dir.exists?(TMP_DIR)
      fpath = File.join(TMP_DIR, file.name)
      zfile.extract(file, fpath) unless File.exist?(fpath)
      conten_path << fpath
    end
  end
  conten_path
end

def unzip_files(fnames)
  unzipped_fnames = []
  fnames.select { |fn| File.extname(fn) == ".zip" }.each do |fname|
    unzipped_fnames.concat( unzip_archive(fname) )
    fnames.delete(fname)
  end
  unzipped_fnames
end

def get_pattern(options, argv)
  pattern = if options.has_key?(:pattern) 
    options.delete(:pattern)
  elsif ! argv.empty? 
    Regexp.new(argv.shift)
  else
    puts USAGE
    exit 1
  end
  pattern  
end

def search_in_files(pattern, options)
  if options[:Z]
    unzipped_fnames = unzip_files(options[:fnames])
    options[:fnames].concat( unzipped_fnames )
  else
    options[:fnames].reject! { |fn| File.extname(fn) == ".zip" }
  end
  options[:fnames].delete_if { |fn| File.binary?(fn) }.each do |fname| 
    File.open(fname) do |file|
      puts "In the file \"#{fname}\":".blue
      find_in_file(file, pattern, options[:a])
    end
  end
end

options = parse_options(ARGV)
pattern = get_pattern(options, ARGV)
options[:fnames].concat(ARGV)

if ! options[:fnames].empty? 
  search_in_files(pattern, options)
else
  # search in stdin(allows to use rgrep in pipeline)
  puts "In the STDIN:".blue
  find_in_file(STDIN.read.chomp.split("\n"), pattern, options[:a])
end
